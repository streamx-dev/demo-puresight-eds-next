name: Publish web resources to StreamX

on:
  workflow_dispatch:
    inputs:
      publish_all_webresources:
        description: "Publish all, pattern included webresources to StreamX"
        required: false
        type: boolean
        default: false
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  publish-if-merged:
    if: github.event.pull_request.merged == true
    name: run_on_pr_merged
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: $((${{ github.event.pull_request.commits }} + 1))

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up homebrew
        uses: 'Homebrew/actions/setup-homebrew@master'

      - name: Install StreamX via Homebrew
        run: |
          brew install streamx-dev/preview-tap/streamx

      - name: Publish modified, pattern included webresources to StreamX
        env:
          STREAMX_INGESTION_AUTH_TOKEN: ${{ secrets.STREAMX_TOKEN }}
          STREAMX_INGESTION_BASE_URL: ${{ vars.STREAMX_INGESTION_BASE_URL }}
        run: |
          if [ -z "$STREAMX_INGESTION_AUTH_TOKEN" ]; then
            echo "Error: STREAMX_INGESTION_AUTH_TOKEN is not set. Please configure the GitHub secret."
            exit 1
          fi
          if [ -z "$STREAMX_INGESTION_BASE_URL" ]; then
            echo "Error: STREAMX_INGESTION_BASE_URL is not set. Please configure the GitHub variables."
            exit 1
          fi

          VARS_STREAMX_INGESTION_WEBRESOURCE_INCLUDES='${{ vars.STREAMX_INGESTION_WEBRESOURCE_INCLUDES }}';
          VARS_DRY_RUN='${{ vars.DRY_RUN }}';

          if [[ -z $VARS_STREAMX_INGESTION_WEBRESOURCE_INCLUDES || $VARS_STREAMX_INGESTION_WEBRESOURCE_INCLUDES == ""  ]]; then
            echo "Missing file patterns variable [PUBLISH_STREAMX_FILES_PATTERNS]. Execution skipped.";
            exit 1;
          fi

          sleep 1s;
          DRY_RUN=false;
          if [[ ! -z $VARS_DRY_RUN && $VARS_DRY_RUN == "true" ]]; then
            DRY_RUN=true;
            if ( $DRY_RUN ); then
              echo "Dry run mode: enabled"
            fi
          fi

          PATTERNS=`echo "$VARS_STREAMX_INGESTION_WEBRESOURCE_INCLUDES" | jq -r  '.[]'`
          echo "Accepted file patterns:"
          echo "$PATTERNS"
          echo "--------------------------------------"

          streamx_action() {
            local FILES=$1;
            local ACTION=$2;
            for FILE_PATH in $FILES; do
              echo "--------------------------------------"
              echo "Checking file $FILE_PATH"
              for FILE_PATTERN in $PATTERNS; do
                if [[ "$FILE_PATH" =~ "$FILE_PATTERN" ]]; then
                  echo "Accepted file $FILE_PATH - did match the pattern $FILE_PATTERN.";
                  if ( $DRY_RUN ); then
                    echo "Sending $FILE_PATH to StreamX - SKIPPED - dry run mode enabled";
                  else
                    case "$ACTION" in
                      "publish")
                        echo "Publishing $FILE_PATH to StreamX";
                        webresourcedata=$(cat "$FILE_PATH" | jq . -sR);
                        streamx --accept-license publish --ingestion-url=$STREAMX_INGESTION_BASE_URL web-resources "$FILE_PATH" -s "content.bytes=$webresourcedata" -p "sx:type=web-resource/static"
                        ;;
                      "unpublish")
                        echo "Unpublishing $FILE_PATH from StreamX";
                        streamx unpublish web-resources "$FILE_PATH"
                        ;;
                      *)
                        echo "Only publish / unpublish options are supported."
                        exit 1
                        ;;
                    esac
                  fi
                fi
              done
            done
          }

          CHANGED_FILES=$(git diff --name-only --diff-filter=d HEAD HEAD~${{ github.event.pull_request.commits }});
          if [ -n "$CHANGED_FILES" ]; then
            streamx_action $CHANGED_FILES publish;
          fi

          REMOVED_FILES=$(git diff --name-only --diff-filter=D HEAD HEAD~${{ github.event.pull_request.commits }});
          if [ -n "$REMOVED_FILES" ]; then
            streamx_action $REMOVED_FILES unpublish;
          fi

        shell: bash

  publish-all:
    if: github.event_name == 'workflow_dispatch' && inputs.publish_all_webresources == true
    name: run_on_manual_trigger
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up homebrew
        uses: 'Homebrew/actions/setup-homebrew@master'

      - name: Install StreamX via Homebrew
        run: |
          brew install streamx-dev/preview-tap/streamx

      - name: Publish all, pattern included webresources to StreamX
        env:
          STREAMX_INGESTION_AUTH_TOKEN: ${{ secrets.STREAMX_TOKEN }}
          STREAMX_INGESTION_BASE_URL: ${{ vars.STREAMX_INGESTION_BASE_URL }}
        run: |
          if [ -z "$STREAMX_INGESTION_AUTH_TOKEN" ]; then
            echo "Error: STREAMX_INGESTION_AUTH_TOKEN is not set. Please configure the GitHub secret."
            exit 1
          fi
          if [ -z "$STREAMX_INGESTION_BASE_URL" ]; then
            echo "Error: STREAMX_INGESTION_BASE_URL is not set. Please configure the GitHub variables."
            exit 1
          fi

          VARS_STREAMX_INGESTION_WEBRESOURCE_INCLUDES='${{ vars.STREAMX_INGESTION_WEBRESOURCE_INCLUDES }}';
          VARS_DRY_RUN='${{ vars.DRY_RUN }}';

          if [[ -z $VARS_STREAMX_INGESTION_WEBRESOURCE_INCLUDES || $VARS_STREAMX_INGESTION_WEBRESOURCE_INCLUDES == ""  ]]; then
            echo "Missing file patterns variable [PUBLISH_STREAMX_FILES_PATTERNS]. Execution skipped.";
            exit 1;
          fi

          sleep 1s;
          DRY_RUN=false;
          if [[ ! -z $VARS_DRY_RUN && $VARS_DRY_RUN == "true" ]]; then
            DRY_RUN=true;
            if ( $DRY_RUN ); then
              echo "Dry run mode: enabled"
            fi
          fi

          PATTERNS=`echo "$VARS_STREAMX_INGESTION_WEBRESOURCE_INCLUDES" | jq -r  '.[]'`
          echo "Accepted file patterns:"
          echo "$PATTERNS"
          echo "--------------------------------------"

          streamx_action() {
            local FILES=$1;
            local ACTION=$2;
            for FILE_PATH in $FILES; do
              echo "--------------------------------------"
              echo "Checking file $FILE_PATH"
              for FILE_PATTERN in $PATTERNS; do
                if [[ "$FILE_PATH" =~ "$FILE_PATTERN" ]]; then
                  echo "Accepted file $FILE_PATH - did match the pattern $FILE_PATTERN.";
                  if ( $DRY_RUN ); then
                    echo "Sending $FILE_PATH to StreamX - SKIPPED - dry run mode enabled";
                  else
                    case "$ACTION" in
                      "publish")
                        echo "Publishing $FILE_PATH to StreamX";
                        webresourcedata=$(cat "$FILE_PATH" | jq . -sR);
                        streamx --accept-license publish --ingestion-url=$STREAMX_INGESTION_BASE_URL web-resources "$FILE_PATH" -s "content.bytes=$webresourcedata" -p "sx:type=web-resource/static"
                        ;;
                      "unpublish")
                        echo "Unpublishing $FILE_PATH from StreamX";
                        streamx unpublish web-resources "$FILE_PATH"
                        ;;
                      *)
                        echo "Only publish / unpublish options are supported."
                        exit 1
                        ;;
                    esac
                  fi
                fi
              done
            done
          }

          CHANGED_FILES=`find * -type f`
          if [ -n "$CHANGED_FILES" ]; then
            streamx_action $CHANGED_FILES publish;
          fi

        shell: bash